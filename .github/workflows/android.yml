name: Builder for Android

on:
  push:
    tags:
      - "v*"

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          echo "Freeing up disk space..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/.ghcup
          sudo apt-get clean
          docker system prune -a -f || true
          df -h

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf lib32z1 lib32stdc++6 unzip wget

      - name: Install Android SDK
        run: |
          export ANDROID_HOME=$HOME/Android/Sdk
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          mkdir -p "$ANDROID_HOME"
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip commandlinetools-linux-11076708_latest.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          rm commandlinetools-linux-11076708_latest.zip
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: Accept Android SDK licenses and install components
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "build-tools;34.0.0" "platforms;android-34" "ndk;25.1.8937393"
          echo "NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install pnpm
        run: |
          npm i -g pnpm

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "pnpm"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add Android Rust targets
        run: |
          rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install frontend dependencies
        run: pnpm install

      - name: Clean up before build
        run: |
          echo "Cleaning up before build..."
          # Clean npm cache
          npm cache clean --force
          # Clean gradle cache if exists
          rm -rf ~/.gradle/daemon/
          # Clean any existing build artifacts
          rm -rf src-tauri/gen/android/app/build/
          rm -rf src-tauri/target/
          df -h

      - name: Grant execute permission for gradlew
        run: chmod +x ./src-tauri/gen/android/gradlew

      - name: Setup Android Keystore
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          echo "storeFile=$(pwd)/keystore.jks" >> keystore.properties
          # Create keystore from GitHub secrets (if provided)
          if [ -n "${{ secrets.ANDROID_KEY_BASE64 }}" ]; then
            base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $(pwd)/keystore.jks
            echo "Using provided keystore"
          else
            # Generate a debug keystore for CI builds
            echo "Generating debug keystore for CI"
            keytool -genkey -v -keystore $(pwd)/keystore.jks \
              -keyalg RSA -keysize 2048 -validity 10000 \
              -storepass ${{ secrets.ANDROID_KEY_PASSWORD }} -keypass ${{ secrets.ANDROID_KEY_PASSWORD }} \
              -alias ${{ secrets.ANDROID_KEY_ALIAS }} \
              -dname "CN=Dmitriy303, OU=TCS, O=TechCraft Solutions, L=New York, S=Washington, C=US"
          fi

      - name: Build Android APK (Release)
        run: |
          echo "Building release APK..."
          df -h
          pnpm tauri android build --apk

      - name: Clean up after release build
        run: |
          echo "Cleaning up after release build..."
          rm -rf src-tauri/target/
          rm -rf ~/.gradle/caches/transforms-*
          df -h

      - name: Build Android AAB
        run: |
          echo "Building AAB..."
          pnpm tauri android build --aab

      - name: Clean up after AAB build
        run: |
          echo "Cleaning up after AAB build..."
          rm -rf src-tauri/target/
          rm -rf ~/.gradle/caches/transforms-*
          df -h

      - name: Build Debug APK (for testing)
        run: |
          echo "Building debug APK..."
          pnpm tauri android build --apk --debug

      - name: Upload Debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: src-tauri/gen/android/app/build/outputs/apk/universal/debug/*.apk

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: src-tauri/gen/android/app/build/outputs/bundle/universalRelease/*.aab

      - name: Upload to Existing Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            src-tauri/gen/android/app/build/outputs/apk/universal/release/*.apk
            src-tauri/gen/android/app/build/outputs/bundle/universalRelease/*.aab
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}